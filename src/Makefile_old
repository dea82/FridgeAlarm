# The MIT License (MIT)
#
# Copyright (c) 2015-2016 Andreas L.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Build directory
OUTDIR = output


# MCU name
#MCU = attiny13a
MCU = attiny85

# Clock frequency
F_CPU = 8000000

# Output format. (can be srec, ihex, binary)
FORMAT = ihex

# Target file name (without extension).
TARGET = FridgeAlarm


# List C source files here. (C dependencies are automatically generated.)
SRC = $(wildcard *.c)

# List S (assembler) files here. Mandatory file is boot.S which
# contains the reset and interrupt vector.
ASRC = boot.S $(filter-out boot.S,$(wildcard *.S))


# Optimize for size
OPT = s

CSTANDARD = -std=gnu99

DEBUG = stabs


COMMONFLAGS = -mmcu=$(MCU) -g$(DEBUG) -DF_CPU=$(F_CPU) -flto

CFLAGS = $(COMMONFLAGS)
CFLAGS += -O$(OPT)
CFLAGS += $(CSTANDARD)
CFLAGS += -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
# Put data and functions in separate sections - not linked if not used
CFLAGS += -fdata-sections -ffunction-sections
CFLAGS += -Wall -Wstrict-prototypes -Werror=missing-prototypes

ASFLAGS = $(COMMONFLAGS)
ASFLAGS += -DF_CPU=$(F_CPU)
ASFLAGS += -fdata-sections -ffunction-sections

LDFLAGS = $(COMMONFLAGS)
LDFLAGS += -Wl,-gc-sections # Do not link unused function sections
LDFLAGS += -Wl,--relax
LDFLAGS += -nostartfiles




# Define programs and commands.
SHELL = sh
CC = avr-gcc
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size
NM = avr-nm
REMOVE = rm -f
COPY = cp




# Define Messages
# English
MSG_ERRORS_NONE = Errors: none
MSG_BEGIN = -------- begin --------
MSG_END = --------  end  --------
MSG_SIZE_BEFORE = Size before:
MSG_SIZE_AFTER = Size after:
MSG_COFF = Converting to AVR COFF:
MSG_EXTENDED_COFF = Converting to AVR Extended COFF:
MSG_FLASH = Creating load file for Flash:
MSG_EEPROM = Creating load file for EEPROM:
MSG_EXTENDED_LISTING = Creating Extended Listing:
MSG_SYMBOL_TABLE = Creating Symbol Table:
MSG_LINKING = Linking:
MSG_COMPILING = Compiling:
MSG_ASSEMBLING = Assembling:
MSG_CLEANING = Cleaning project:




# Define all object files. Important to build assembly first because
# it contains init0 section.
OBJ = $(ASRC:%.S=$(OUTDIR)/%.o) $(SRC:%.c=$(OUTDIR)/%.o)

# Define all listing files.
LST = $(ASRC:%.S=$(OUTDIR)/%.lst) $(SRC:%.c=$(OUTDIR)/%.lst)


# Compiler flags to generate dependency files.
GENDEPFLAGS = -Wp,-M,-MP,-MT,$(*F).o,-MF,.dep/$(@F).d


# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS = -I. $(CFLAGS) $(GENDEPFLAGS)
ALL_ASFLAGS = -I. -x assembler-with-cpp $(ASFLAGS)





# Default target.
all: begin gccversion createdir sizebefore build sizeafter finished end

attiny85: MCU_TARGET = attiny85
attiny85: FREQ_MCU = 8000000


build: elf hex eep lss sym

elf: $(OUTDIR)/$(TARGET).elf
hex: $(OUTDIR)/$(TARGET).hex
eep: $(OUTDIR)/$(TARGET).eep
lss: $(OUTDIR)/$(TARGET).lss
sym: $(OUTDIR)/$(TARGET).sym



# Eye candy.
# AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.
begin:
	@echo
	@echo $(MSG_BEGIN)

finished:
        @echo $(MSG_ERRORS_NONE)

end:
	@echo $(MSG_END)
	@echo


# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) $(OUTDIR)/$(TARGET).hex
ELFSIZE = $(SIZE) -C --mcu=$(MCU) $(OUTDIR)/$(TARGET).elf
sizebefore:
	@if [ -f $(OUTDIR)/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); echo; fi

sizeafter:
	@if [ -f $(OUTDIR)/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); echo; fi



# Display compiler version information.
gccversion:
	@$(CC) --version

# Create output dir if not exist
createdir:
	mkdir -p $(OUTDIR)

# Program the device.
program: $(OUTDIR)/$(TARGET).hex $(OUTDIR)/$(TARGET).eep
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)
$(AVRDUDE_WRITE_EEPROM)




# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
--change-section-address .data-0x800000 \
--change-section-address .bss-0x800000 \
--change-section-address .noinit-0x800000 \
--change-section-address .eeprom-0x810000


coff: $(OUTDIR)/$(TARGET).elf
	@echo
	@echo $(MSG_COFF) $(OUTDIR)/$(TARGET).cof
	$(COFFCONVERT) -O coff-avr $< $(OUTDIR)/$(TARGET).cof


extcoff: $(OUTDIR)/$(TARGET).elf
	@echo
	@echo $(MSG_EXTENDED_COFF) $(OUTDIR)/$(TARGET).cof
	$(COFFCONVERT) -O coff-ext-avr $< $(OUTDIR)/$(TARGET).cof



# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

%.eep: %.elf
	@echo
	@echo $(MSG_EEPROM) $@
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $< $@

# Create extended listing file from ELF output file.
$(OUTDIR)/%.lss: $(OUTDIR)/%.elf
	@echo
	@echo $(MSG_EXTENDED_LISTING) $(OUTDIR)/$@
	$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
$(OUTDIR)/%.sym: $(OUTDIR)/%.elf
	@echo
	@echo $(MSG_SYMBOL_TABLE) $(OUTDIR)/$@
	$(NM) -n $< > $@



# Link: create ELF output file from object files.
.SECONDARY : $(OUTDIR)/$(TARGET).elf
.PRECIOUS : $(OBJ)
%.elf: $(OBJ)
	@echo
	@echo $(MSG_LINKING) $@
	$(CC) $(ALL_CFLAGS) $(OBJ) --output $@ $(LDFLAGS)


# Compile: create object files from C source files.
$(OUTDIR)/%.o : %.c
	@echo
	@echo $(MSG_COMPILING) $<
	$(CC) -c $(ALL_CFLAGS) $< -o $@


# Compile: create assembler files from C source files.
%.s : %.c
	$(CC) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files.
$(OUTDIR)/%.o : %.S
	@echo
	@echo $(MSG_ASSEMBLING) $<
	$(CC) -c $(ALL_ASFLAGS) $< -o $@



# Target: clean project.
clean: begin clean_list finished end

clean_list :
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(OUTDIR)/$(TARGET).hex
	$(REMOVE) $(OUTDIR)/$(TARGET).eep
	$(REMOVE) $(OUTDIR)/$(TARGET).obj
	$(REMOVE) $(OUTDIR)/$(TARGET).cof
	$(REMOVE) $(OUTDIR)/$(TARGET).elf
	$(REMOVE) $(OUTDIR)/$(TARGET).map
	$(REMOVE) $(OUTDIR)/$(TARGET).obj
	$(REMOVE) $(OUTDIR)/$(TARGET).a90
	$(REMOVE) $(OUTDIR)/$(TARGET).sym
	$(REMOVE) $(OUTDIR)/$(TARGET).lnk
	$(REMOVE) $(OUTDIR)/$(TARGET).lss
	$(REMOVE) $(OBJ)
	$(REMOVE) $(LST)
	$(REMOVE) $(SRC:.c=.s)
	$(REMOVE) $(SRC:.c=.d)
	$(REMOVE) .dep/*



# Include the dependency files.
-include $(shell mkdir .dep 2>/dev/null) $(wildcard .dep/*)

doc:
	@echo Generate documentation
	doxygen doxygen_config

# Listing of phony targets.
.PHONY : all begin finish end sizebefore sizeafter gccversion \
build elf hex eep lss sym coff extcoff \
clean clean_list program
